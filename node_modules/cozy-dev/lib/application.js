// Generated by CoffeeScript 1.10.0
(function() {
  var Client, VagrantManager, async, exec, fs, helpers, log, path, semver, spawn, vagrantManager,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require('colors');

  async = require('async');

  path = require('path');

  fs = require('fs');

  exec = require('child_process').exec;

  spawn = require('child_process').spawn;

  semver = require('semver');

  log = require('printit')({
    prefix: 'application'
  });

  Client = require('request-json').JsonClient;

  helpers = require('./helpers');

  VagrantManager = require('./vagrant').VagrantManager;

  vagrantManager = new VagrantManager();

  Client.prototype.configure = function(url, password, callback) {
    this.host = url;
    return this.post("login", {
      password: password
    }, function(err, res, body) {
      if ((err != null) || res.statusCode !== 200) {
        return log.error("Cannot get authenticated".red);
      } else {
        return callback();
      }
    });
  };

  exports.ApplicationManager = (function() {
    function ApplicationManager() {
      this.checkVersions = bind(this.checkVersions, this);
      this.isInstalled = bind(this.isInstalled, this);
    }

    ApplicationManager.prototype.client = new Client("");

    ApplicationManager.prototype.checkError = function(err, res, body, code, msg, callback) {
      if (err || res.statusCode !== code) {
        if (err != null) {
          log.error(err.red);
        }
        log.info(msg);
        if (body != null) {
          if (body.msg != null) {
            return log.info(body.msg);
          } else {
            return log.info(body);
          }
        }
      } else {
        return callback();
      }
    };

    ApplicationManager.prototype.updateApp = function(app, url, password, callback) {
      log.info("Update " + app + "...");
      return this.client.configure(url, password, (function(_this) {
        return function() {
          path = "api/applications/" + app + "/update";
          return _this.client.put(path, {}, function(err, res, body) {
            var output;
            output = 'Update failed.'.red;
            return _this.checkError(err, res, body, 200, output, callback);
          });
        };
      })(this));
    };

    ApplicationManager.prototype.installApp = function(app, url, repoUrl, password, callback) {
      log.info("Install started for " + app + "...");
      return this.client.configure(url, password, (function(_this) {
        return function() {
          var app_descriptor;
          app_descriptor = {
            name: app,
            git: repoUrl
          };
          path = "api/applications/install";
          return _this.client.post(path, app_descriptor, function(err, res, body) {
            var output;
            output = 'Install failed.'.red;
            return _this.checkError(err, res, body, 201, output, callback);
          });
        };
      })(this));
    };

    ApplicationManager.prototype.uninstallApp = function(app, url, password, callback) {
      log.info("Uninstall started for " + app + "...");
      return this.client.configure(url, password, (function(_this) {
        return function() {
          path = "api/applications/" + app + "/uninstall";
          return _this.client.del(path, function(err, res, body) {
            var output;
            output = 'Uninstall failed.'.red;
            return _this.checkError(err, res, body, 200, output, callback);
          });
        };
      })(this));
    };

    ApplicationManager.prototype.stopApp = function(app, callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', "cozy-monitor stop " + app]
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    ApplicationManager.prototype.startApp = function(app, callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', "cozy-monitor start " + app]
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    ApplicationManager.prototype.checkStatus = function(url, password, callback) {
      var checkApp, checkStatus;
      checkApp = (function(_this) {
        return function(app) {
          return function(next) {
            if (app !== "home" && app !== "proxy") {
              path = "apps/" + app + "/";
            } else {
              path = "";
            }
            return _this.client.get(path, function(err, res) {
              if ((err != null) || res.statusCode !== 200) {
                log.error((app + ": ") + "down".red);
              } else {
                log.info((app + ": ") + "up".green);
              }
              return next();
            });
          };
        };
      })(this);
      checkStatus = (function(_this) {
        return function() {
          return async.series([checkApp("home"), checkApp("proxy", "routes")], function() {
            return _this.client.get("api/applications/", function(err, res, apps) {
              var app, funcs, i, len, ref;
              if (err != null) {
                return log.error(err.red);
              } else {
                funcs = [];
                if ((apps != null) && typeof apps === "object") {
                  ref = apps.rows;
                  for (i = 0, len = ref.length; i < len; i++) {
                    app = ref[i];
                    funcs.push(checkApp(app.name));
                  }
                  return async.series(funcs, callback);
                }
              }
            });
          });
        };
      })(this);
      return this.client.configure(url, password, checkStatus);
    };

    ApplicationManager.prototype.isInstalled = function(app, url, password, callback) {
      return this.client.configure(url, password, (function(_this) {
        return function() {
          return _this.client.get("apps/" + (app.toLowerCase()) + "/", function(err, res, body) {
            if (body === "app unknown") {
              return callback(null, false);
            } else if (err) {
              return callback(err, false);
            } else {
              return callback(null, true);
            }
          });
        };
      })(this));
    };

    ApplicationManager.prototype.addInDatabase = function(manifest, callback) {
      var dsClient;
      dsClient = new Client('http://localhost:9101');
      return dsClient.post('data/', manifest, function(err, res, body) {
        var data, filePath;
        if (err != null) {
          return callback(err);
        }
        if (manifest.iconPath != null) {
          path = "data/" + body._id + "/attachments/";
          data = {
            name: "icon." + manifest.iconType
          };
          filePath = manifest.iconPath;
          return dsClient.sendFile(path, filePath, data, function(err, res, body) {
            return callback(err);
          });
        } else {
          return callback();
        }
      });
    };

    ApplicationManager.prototype.resetProxy = function(callback) {
      var proxyClient;
      proxyClient = new Client('http://localhost:9104');
      return proxyClient.get('routes/reset', function(err, res, body) {
        return callback(err);
      });
    };

    ApplicationManager.prototype.removeFromDatabase = function(manifest, callback) {
      var dsClient, option;
      dsClient = new Client('http://localhost:9101');
      option = {
        key: manifest.slug
      };
      return dsClient.post('request/application/byslug/', option, function(err, res, body) {
        var app, name, port, ref;
        if ((err != null) || !(body != null ? (ref = body[0]) != null ? ref.value : void 0 : void 0)) {
          return callback(err);
        }
        app = body[0].value;
        port = app.port;
        name = app.name;
        return dsClient.del("data/" + app._id + "/", function(err, res, body) {
          return callback(err);
        });
      });
    };

    ApplicationManager.prototype.addPortForwarding = function(name, port, callback) {
      return vagrantManager.getSshConfig(function(err, config) {
        var args, child, command, file, options, pid;
        if (err != null) {
          return callback(err);
        }
        options = {
          detached: true,
          stdio: ['ignore', 'ignore', 'ignore']
        };
        command = 'ssh';
        args = [];
        args.push('-N');
        args.push('vagrant@127.0.0.1');
        args.push('-R');
        args.push(port + ":localhost:" + port);
        args.push('-p');
        args.push(config.Port);
        args.push('-o');
        args.push("IdentityFile=" + config.IdentityFile);
        args.push('-o');
        args.push("UserKnownHostsFile=" + config.UserKnownHostsFile);
        args.push('-o');
        args.push("StrictHostKeyChecking=" + config.StrictHostKeyChecking);
        args.push('-o');
        args.push("PasswordAuthentication=" + config.PasswordAuthentication);
        args.push('-o');
        args.push("IdentitiesOnly=" + config.IdentitiesOnly);
        child = spawn(command, args, options);
        pid = child.pid;
        child.unref();
        file = helpers.getPidFile(name);
        return fs.open(file, 'w', function(err) {
          if (err != null) {
            return callback(err);
          }
          return fs.writeFile(file, pid, callback);
        });
      });
    };

    ApplicationManager.prototype.removePortForwarding = function(name, port, callback) {
      var error, file, pid;
      file = helpers.getPidFile(name);
      if (fs.existsSync(file)) {
        pid = fs.readFileSync(file, 'utf8');
        fs.unlink(file);
        try {
          process.kill(pid);
        } catch (error) {
          log.info('No process.');
        }
      }
      return callback();
    };

    ApplicationManager.prototype.stackVersions = function(callback) {
      var dsClient;
      dsClient = new Client('http://localhost:9101');
      return dsClient.post('request/stackapplication/all/', {}, function(err, res, body) {
        if (!(body && (err == null))) {
          return callback();
        }
        return async.eachSeries(body, function(app, cb) {
          var github;
          app = app.value;
          path = "cozy/cozy-" + app.name + "/master/package.json";
          github = new Client('https://raw.github.com/');
          return github.get(path, function(err, res, data) {
            if ((err != null) && err.code === 'ENOTFOUND') {
              log.warn("You're in offline, can't check cozy stack versions.");
              return callback();
            } else if ((data != null ? data.version : void 0) != null) {
              if (semver.gt(data.version, app.version)) {
                log.warn(app.name + ": ");
                log.warn(app.version + " -> " + data.version);
                return cb(true);
              } else {
                return cb(false);
              }
            } else {
              return cb();
            }
          });
        }, callback);
      });
    };

    ApplicationManager.prototype.checkVersions = function(appData, callback) {
      var child;
      log.info('Check cozy-dev version :');
      return child = exec('npm show cozy-dev version', (function(_this) {
        return function(err, stdout, stderr) {
          var version;
          version = stdout.replace(/\n/g, '');
          if (semver.gt(version, appData.version)) {
            log.warn('A new version is available for cozy-dev, ' + "you can enter 'npm -g update cozy-dev' to update it.");
          } else {
            log.info("Cozy-dev is up to date.".green);
          }
          log.info('Check cozy versions : ');
          return _this.stackVersions(function(need) {
            if (need) {
              log.warn("A new version is available for cozy stack, " + "you can enter cozy-dev vm:update to update it.");
            } else if (need != null) {
              log.info("Cozy-dev is up to date.".green);
            }
            return callback();
          });
        };
      })(this));
    };

    return ApplicationManager;

  })();

}).call(this);
