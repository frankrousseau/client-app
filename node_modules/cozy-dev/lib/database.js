// Generated by CoffeeScript 1.10.0
(function() {
  var CONTROLLER_CONFIG, CONTROLLER_CONFIG_PATH, Client, DatabaseManager, async, exec, fs, log;

  require('colors');

  fs = require('fs');

  exec = require('child_process').exec;

  async = require('async');

  log = require('printit')({
    prefix: 'database-manager'
  });

  Client = require('request-json').JsonClient;

  CONTROLLER_CONFIG = 'controller.json';

  CONTROLLER_CONFIG_PATH = "/etc/cozy/" + CONTROLLER_CONFIG;

  module.exports = DatabaseManager = (function() {
    function DatabaseManager() {}

    DatabaseManager.prototype["switch"] = function(newName, callback) {
      return async.waterfall([
        function(next) {
          var command;
          command = "vagrant ssh -c \"sudo cat " + CONTROLLER_CONFIG_PATH + " 1>&2\"";
          log.info('Getting current configuration...');
          return exec(command, function(err, stderr, stdout) {
            if (err != null) {
              return next(err);
            } else {
              return next(null, stdout);
            }
          });
        }, function(rawConfig, next) {
          var config, err, error, newRawConfig;
          try {
            config = JSON.parse(rawConfig);
            if (config.env == null) {
              config.env = {};
            }
            if (!config.env['data-system']) {
              config.env['data-system'] = {};
            }
            config.env['data-system']['DB_NAME'] = newName;
            newRawConfig = JSON.stringify(config, null, ' ');
            return next(null, newRawConfig);
          } catch (error) {
            err = error;
            return next(err);
          }
        }, function(rawConfig, next) {
          var command, subCommand;
          rawConfig = rawConfig.replace(/"/g, "\\\\\\\"");
          subCommand = "echo \\\"" + rawConfig + "\\\" |\nsudo tee " + CONTROLLER_CONFIG_PATH + " >> /dev/null";
          command = "vagrant ssh -c \"" + subCommand + "\"";
          log.info('Updating new configuration...');
          return exec(command, function(err, stderr, stdout) {
            if ((err != null) || stderr) {
              err = err || stderr;
              return next(err);
            } else {
              return next();
            }
          });
        }, function(next) {
          var command;
          command = "vagrant ssh -c \"sudo supervisorctl restart cozy-controller\"";
          log.info('Restarting controller...');
          return exec(command, function(err, stderr, stdout) {
            return next(err);
          });
        }
      ], function(err) {
        var msg;
        if (err != null) {
          msg = "An error occured while changing Cozy's configuration";
          log.error((msg + " -- " + err).red);
        } else {
          log.info(("Database successfully switched to " + newName).green);
        }
        return callback();
      });
    };

    DatabaseManager.prototype.reset = function(dbName, callback) {
      return async.series({
        removeDatabase: function(next) {
          var couch;
          log.info('Resetting database...');
          couch = new Client('http://localhost:5984');
          return couch.del("" + dbName, function(err, res, body) {
            err = err || body.error;
            return next(err);
          });
        },
        restartController: function(next) {
          var command;
          command = "vagrant ssh -c \"sudo supervisorctl restart cozy-controller\"";
          log.info('Restarting controller...');
          return exec(command, function(err, stderr, stdout) {
            return next(err);
          });
        }
      }, function(err) {
        var msg;
        if (err != null) {
          msg = "An error occured while reseting database";
          log.error((msg + " -- " + err).red);
        } else {
          log.info(("Database " + dbName + " successfully reset.").green);
        }
        return callback();
      });
    };

    DatabaseManager.prototype.getCurrentDatabase = function(callback) {
      var command;
      command = "vagrant ssh -c \"sudo cat " + CONTROLLER_CONFIG_PATH + "\"";
      return exec(command, function(err, stdout, stderr) {
        var config, databaseName, error, msg, ref, ref1;
        try {
          config = JSON.parse(stdout);
          databaseName = config != null ? (ref = config.env) != null ? (ref1 = ref['data-system']) != null ? ref1['DB_NAME'] : void 0 : void 0 : void 0;
          if (databaseName == null) {
            databaseName = 'cozy';
          }
          log.info("Current database is \"" + databaseName + "\"");
          return callback();
        } catch (error) {
          err = error;
          msg = "An error occured while getting database name";
          log.error((msg + " -- " + err).red);
          return callback(err);
        }
      });
    };

    return DatabaseManager;

  })();

}).call(this);
