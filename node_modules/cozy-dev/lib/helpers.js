// Generated by CoffeeScript 1.10.0
(function() {
  var Client, inquirer, isStarted, os, path, spawn;

  spawn = require('child_process').spawn;

  os = require('os');

  path = require('path');

  inquirer = require('inquirer');

  Client = require('request-json').JsonClient;

  module.exports.spawnUntilEmpty = function(commands, callback) {
    var command, commandDescriptor, name;
    commandDescriptor = commands.shift();
    if (module.exports.isRunningOnWindows()) {
      name = commandDescriptor.name;
      commandDescriptor.name = "cmd";
      commandDescriptor.args.unshift(name);
      commandDescriptor.args.unshift('/C');
    }
    command = spawn(commandDescriptor.name, commandDescriptor.args, commandDescriptor.opts);
    if (os.platform().match(/^win/)) {
      name = commandDescriptor.name;
      commandDescriptor.name = "cmd";
      commandDescriptor.args.unshift(name);
      commandDescriptor.args.unshift('/C');
    }
    command.stdout.pipe(process.stdout);
    command.stderr.pipe(process.stderr);
    return command.on('close', function(code, signal) {
      if (commands.length > 0 && code === 0) {
        return module.exports.spawnUntilEmpty(commands, callback);
      } else {
        return callback(code);
      }
    });
  };

  isStarted = module.exports.isStarted = function(count, callback) {
    var client;
    if (count > 10) {
      return callback();
    } else {
      client = new Client("http://localhost:9104");
      return client.get('/status', function(err, res, body) {
        var app, results, status;
        if (err) {
          return setTimeout(function() {
            return isStarted(count + 1, callback);
          }, 1 * 1000);
        } else {
          results = [];
          for (app in body) {
            status = body[app];
            if (app === 'controller') {
              if (status === true) {
                results.push(callback());
              } else {
                results.push(setTimeout(function() {
                  return isStarted(count + 1, callback);
                }, 1 * 1000));
              }
            }
          }
          return results;
        }
      });
    }
  };

  module.exports.isRunningOnWindows = function() {
    return os.platform().match(/^win/);
  };

  module.exports.promptPassword = function(name) {
    return function(cb) {
      var options;
      options = {
        type: 'password',
        name: 'password',
        message: name
      };
      return inquirer.prompt(options, function(answers) {
        return cb(null, answers.password);
      });
    };
  };

  module.exports.getPidFile = function(name) {
    var home;
    if (module.exports.isRunningOnWindows()) {
      home = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;
      return path.join(home, name + ".pid");
    } else {
      return path.join('/tmp', name + ".pid");
    }
  };

}).call(this);
