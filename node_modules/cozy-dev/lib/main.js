// Generated by CoffeeScript 1.10.0
(function() {
  var ApplicationManager, Client, DatabaseManager, ProjectManager, RepoManager, VagrantManager, appData, appManager, async, client, databaseManager, haltOption, helpers, inquirer, log, path, program, projectManager, repoManager, vagrantManager;

  require('colors');

  program = require('commander');

  path = require('path');

  log = require('printit')({
    prefix: 'cozy-dev   '
  });

  inquirer = require('inquirer');

  async = require('async');

  Client = require("request-json").JsonClient;

  Client.prototype.configure = function(url, password, callback) {
    this.host = url;
    return this.post("login", {
      password: password
    }, function(err, res) {
      if ((err != null) || (res != null ? res.statusCode : void 0) !== 200) {
        return log.error("Cannot get authenticated");
      } else {
        return callback();
      }
    });
  };

  client = new Client("");

  RepoManager = require('./repository').RepoManager;

  repoManager = new RepoManager();

  ApplicationManager = require('./application').ApplicationManager;

  appManager = new ApplicationManager();

  ProjectManager = require('./project').ProjectManager;

  projectManager = new ProjectManager();

  VagrantManager = require('./vagrant').VagrantManager;

  vagrantManager = new VagrantManager();

  DatabaseManager = require('./database');

  databaseManager = new DatabaseManager();

  helpers = require('./helpers');

  appData = require('../package.json');


  /* Tasks */

  program.version(appData.version).option('-u, --url <url>', 'Set url where lives your Cozy Cloud, default ' + 'to localhost').option('-g, --github <github>', 'Link new project to github account').option('-c, --coffee', 'Create app template with coffee script files ' + 'instead of JS files');

  program.command("uninstall <app>").description("Uninstall given application").action(function(app) {
    return async.waterfall([
      helpers.promptPassword('Cozy password'), function(password, cb) {
        return appManager.uninstallApp(app, program.url, password, cb);
      }
    ], function() {
      return log.info((app + " successfully uninstalled.").green);
    });
  });

  program.command("update <app>").description("Update application (git + npm install) and restart it " + "through haibu").action(function(app) {
    return async.waterfall([
      helpers.promptPassword('Cozy password'), function(password, cb) {
        return appManager.updateApp(app, program.url, password, cb);
      }
    ], function() {
      return log.info((app + " successfully updated.").green);
    });
  });

  program.command("new <appname>").description("Create a new app suited to be deployed on a Cozy Cloud.").action(function(appname) {
    var isCoffee, user;
    user = program.github;
    isCoffee = program.coffee;
    if (user != null) {
      log.info("Create repo " + appname + " for user " + user + "...");
      return async.waterfall([
        helpers.promptPassword('Github password'), function(password, cb) {
          var options;
          options = {
            type: 'input',
            name: 'url',
            message: 'Cozy URL'
          };
          return inquirer.prompt(options, function(answers) {
            return cb(null, password, answers.url);
          });
        }, function(password, url, cb) {
          return projectManager.newProject(appname, isCoffee, url, user, password, cb);
        }
      ], function() {
        log.info("Project creation finished.".green);
        return process.exit(0);
      });
    } else {
      log.info("Create project folder: " + appname);
      return repoManager.createLocalRepo(appname, isCoffee, function() {
        return log.info("Project creation finished.".green);
      });
    }
  });

  program.command("deploy <port> [slug]").description("Push code and deploy app located in current directory " + "to your virtualbox. Argument port correspond to port used" + "by your application.").action(function(port, slug) {
    if (port == null) {
      port = 9250;
    }
    return projectManager.recoverManifest(port, function(err, app) {
      var ref, steps;
      if (err != null) {
        return log.error(err);
      }
      if (slug != null) {
        app.name = slug;
        app.slug = slug;
        app.displayName += " (" + slug + ")";
      }
      if ((ref = app.name) === 'home' || ref === 'data-system' || ref === 'proxy') {
        steps = [
          function(cb) {
            return appManager.stopApp(app.name, cb);
          }, function(cb) {
            return appManager.addPortForwarding(app.name, app.port, cb);
          }
        ];
      } else {
        steps = [
          function(cb) {
            return appManager.addInDatabase(app, cb);
          }, function(cb) {
            return appManager.resetProxy(cb);
          }, function(cb) {
            return appManager.addPortForwarding(app.name, app.port, cb);
          }
        ];
      }
      return async.series(steps, function(err) {
        var appUrl, msg, ref1;
        if (err != null) {
          return log.error(err);
        }
        msg = "Application deployed in virtual machine.";
        log.info(msg.green);
        if ((ref1 = app.name) !== 'home' && ref1 !== 'data-system' && ref1 !== 'proxy') {
          appUrl = "http://localhost:9104/#apps/" + app.slug;
          return log.info("You can see your app on " + appUrl);
        }
      });
    });
  });

  program.command("undeploy [slug]").description("Undeploy application").action(function(slug) {
    return projectManager.recoverManifest(9250, function(err, app) {
      var ref, steps;
      if (err != null) {
        return log.error(err);
      }
      if (slug != null) {
        app.name = slug;
        app.slug = slug;
        app.displayName += " (" + slug + ")";
      }
      if ((ref = app.name) === 'home' || ref === 'data-system' || ref === 'proxy') {
        steps = [
          function(cb) {
            return appManager.removePortForwarding(app.name, app.port, cb);
          }, function(cb) {
            return appManager.startApp(app.name, cb);
          }
        ];
      } else {
        steps = [
          function(cb) {
            return appManager.removeFromDatabase(app, cb);
          }, function(cb) {
            return appManager.resetProxy(cb);
          }, function(cb) {
            return appManager.removePortForwarding(app.name, app.port, cb);
          }
        ];
      }
      return async.series(steps, function(err) {
        var msg;
        if (err != null) {
          return log.error(err);
        }
        msg = "Application undeployed in virtual machine.";
        return log.info(msg.green);
      });
    });
  });

  program.command("vm:init").description("Initialize the current folder to host a virtual machine " + "with Vagrant. This will download the base box file.").action(function() {
    log.info("Initializing the virtual machine in the folder..." + "this may take a while.");
    return async.series([
      function(cb) {
        return vagrantManager.checkIfVagrantIsInstalled(cb);
      }, function(cb) {
        return vagrantManager.vagrantBoxAdd(cb);
      }, function(cb) {
        return vagrantManager.vagrantInit(cb);
      }
    ], function() {
      var msg;
      msg = "The virtual machine has been successfully initialized.";
      return log.info(msg.green);
    });
  });

  program.command("vm:start").description("Starts the virtual machine with Vagrant.").action(function() {
    return async.series([
      function(cb) {
        return vagrantManager.checkIfVagrantIsInstalled(cb);
      }, function(cb) {
        log.info("Starting the virtual machine...this may take a while.");
        return vagrantManager.vagrantUp(cb);
      }, function(cb) {
        return vagrantManager.virtualMachineStatus(function(status) {
          return cb();
        });
      }, function(cb) {
        return appManager.checkVersions(appData, cb);
      }
    ], function(err, results) {
      var msg;
      if (err == null) {
        msg = "The virtual machine has been successfully started.";
        return log.info(msg.green);
      } else {
        msg = "An error occurred while your VMs was starting.";
        return log.error(msg.red);
      }
    });
  });

  haltOption = "Properly stop the virtual machine instead of simply " + "suspending its execution";

  program.command("vm:stop").description("Stops the Virtual machine with Vagrant.").action(function() {
    return async.series([
      function(cb) {
        return vagrantManager.checkIfVagrantIsInstalled(cb);
      }, function(cb) {
        log.info("Stopping the virtual machine...this may take a while.");
        return vagrantManager.vagrantHalt(function(code) {
          return cb(null, code);
        });
      }
    ], function(err, results) {
      var _, code, msg;
      _ = results[0], code = results[1];
      if (code === 0) {
        msg = "The virtual machine has been successfully stopped.";
        return log.info(msg.green);
      } else {
        msg = "An error occurred while your VMs was shutting down.";
        return log.error(msg.red);
      }
    });
  });

  program.command("vm:status").description("Tells which services of the VM are running and accessible.").action(function() {
    return async.series([
      function(cb) {
        return vagrantManager.checkIfVagrantIsInstalled(cb);
      }, function(cb) {
        return vagrantManager.virtualMachineStatus(function(code) {
          return cb(null, code);
        });
      }
    ], function(err, results) {
      var _, code;
      _ = results[0], code = results[1];
      if (code === 0) {
        return log.info("All the core services are up and running.".green);
      } else {
        return log.error("One or more services are not running.".red);
      }
    });
  });

  program.command("vm:update").description("Updates the virtual machine with the latest version of " + "the cozy PaaS and core applications").action(function() {
    return async.series([
      function(cb) {
        return vagrantManager.checkIfVagrantIsInstalled(cb);
      }, function(cb) {
        return vagrantManager.update(function(code) {
          return cb(null, code);
        });
      }
    ], function(err, results) {
      var _, code;
      _ = results[0], code = results[1];
      if (code === 0) {
        return log.info("VM updated.".green);
      } else {
        return log.error("An error occurred while updating the VM".red);
      }
    });
  });

  program.command("vm:update-image").description("Updates the virtual machine image. " + "Warning: this action deletes all your data in your virtualbox").action(function() {
    var confirmMessage, options;
    confirmMessage = "You are about to update image of the virtual machine." + " All your data will be lost. Are you sure ?";
    options = {
      type: 'confirm',
      name: 'hasConfirm',
      message: confirmMessage,
      "default": true
    };
    return inquirer.prompt(options, function(answers) {
      if (answers.hasConfirm) {
        return async.series([
          function(cb) {
            return vagrantManager.checkIfVagrantIsInstalled(cb);
          }, function(cb) {
            log.info("Update the old virtual machine...");
            return vagrantManager.vagrantBoxUpdate(cb);
          }, function(cb) {
            return databaseManager.getCurrentDatabase(cb);
          }
        ], function(err, results) {
          if (err) {
            log.info(err);
            return log.error("An error occurred while updating the VM".red);
          } else {
            return log.info("VM updated.".green);
          }
        });
      }
    });
  });

  program.command("vm:destroy").description("Destroy the virtual machine. Data will be lost.").action(function() {
    var confirmMessage;
    confirmMessage = "You are about to remove the virtual machine from " + "your computer. All data will be lost and a new " + "import will be required if you want to use the " + "VM again";
    return async.waterfall([
      function(cb) {
        var options;
        options = {
          type: 'confirm',
          name: 'hasConfirm',
          message: confirmMessage,
          "default": true
        };
        return inquirer.prompt(options, function(answers) {
          return cb(null, answers.hasConfirm);
        });
      }, function(hasConfirm, cb) {
        if (hasConfirm) {
          return vagrantManager.vagrantBoxDestroy(cb);
        } else {
          return cb();
        }
      }
    ], function() {
      var msg;
      msg = "The box has been successfully destroyed. Use " + "cozy vm:init to be able to use the VM again.";
      log.info(msg.green);
      return process.exit();
    });
  });

  program.command("db:switch [dbname]").description("Change the database used by Cozy's data system (default: cozy).").action(function(dbname) {
    dbname = dbname || 'cozy';
    return databaseManager["switch"](dbname, function(err) {
      var returnCode;
      returnCode = err != null ? 1 : 0;
      return process.exit(returnCode);
    });
  });

  program.command("db:reset <dbname>").description("Reset the given database (will destroy all data).").option("-f, --force", "Bypass the confirmation message. USE AT YOUR OWN RISK.").action(function(dbname, args) {
    var confirmMessage, options, processReset;
    processReset = function() {
      return databaseManager.reset(dbname, function(err) {
        var returnCode;
        returnCode = err != null ? 1 : 0;
        return process.exit(returnCode);
      });
    };
    if (args.force != null) {
      return processReset();
    } else {
      confirmMessage = ("You are about to reset the database " + dbname + ". ") + "All data will be lost. Are you sure?";
      options = {
        type: 'confirm',
        name: 'hasConfirmed',
        message: confirmMessage,
        "default": true
      };
      return inquirer.prompt(options, function(answers) {
        if (answers.hasConfirmed) {
          return processReset();
        } else {
          return process.exit(0);
        }
      });
    }
  });

  program.command("db:name").description("Returns the current used database").action(function() {
    return databaseManager.getCurrentDatabase(function(err) {
      var returnCode;
      returnCode = err != null ? 1 : 0;
      return process.exit(returnCode);
    });
  });

  program.command("*").description("Display help message for an unknown command.").action(function() {
    log.error('Unknown command, showing help instead.');
    return program.help();
  });

  program.parse(process.argv);

  if (!(process.argv.length > 2)) {
    program.help();
  }

}).call(this);
