// Generated by CoffeeScript 1.10.0
(function() {
  var ApplicationManager, RepoManager, async, fs, helpers, log, path;

  require('colors');

  log = require('printit')({
    prefix: 'project   '
  });

  async = require('async');

  fs = require('fs');

  path = require('path');

  helpers = require('./helpers');

  RepoManager = require('./repository').RepoManager;

  ApplicationManager = require('./application').ApplicationManager;

  exports.ProjectManager = (function() {
    function ProjectManager() {}

    ProjectManager.prototype.repoManager = new RepoManager();

    ProjectManager.prototype.appManager = new ApplicationManager();

    ProjectManager.prototype.newProject = function(name, isCoffee, url, user, password, callback) {
      var credentials;
      credentials = {
        password: password,
        username: user
      };
      return async.series([
        (function(_this) {
          return function(cb) {
            return _this.repoManager.createGithubRepo(credentials, name, cb);
          };
        })(this), (function(_this) {
          return function(cb) {
            return _this.repoManager.createLocalRepo(name, isCoffee, cb);
          };
        })(this), (function(_this) {
          return function(cb) {
            return _this.repoManager.connectRepos(user, name, cb);
          };
        })(this), (function(_this) {
          return function(cb) {
            return _this.repoManager.saveConfig(user, name, url, cb);
          };
        })(this)
      ], callback);
    };

    ProjectManager.prototype.deploy = function(config, password, callback) {
      var install, name, repoName, update, url, user;
      name = config.cozy.appName;
      url = config.cozy.url;
      user = config.github.user;
      repoName = config.github.repoName;
      install = (function(_this) {
        return function() {
          var repoUrl;
          repoUrl = "https://github.com/" + user + "/" + repoName + ".git";
          return _this.appManager.installApp(name, url, repoUrl, password, callback);
        };
      })(this);
      update = (function(_this) {
        return function() {
          return _this.appManager.updateApp(name, url, password, callback);
        };
      })(this);
      return this.appManager.isInstalled(name, url, password, function(err, isInstalled) {
        var msg;
        if (err != null) {
          msg = "Error occured while connecting to your Cozy Cloud.";
          return log.error(msg.red);
        } else if (isInstalled) {
          return update();
        } else {
          return install();
        }
      });
    };

    ProjectManager.prototype.recoverManifest = function(port, cb) {
      var basePath, err, error, manifest, packagePath, pngPath, svgPath;
      if (!fs.existsSync('package.json')) {
        return log.error("Cannot read package.json. " + "This function should be called in root application folder.");
      } else {
        try {
          packagePath = path.relative(__dirname, 'package.json');
          manifest = require(packagePath);
        } catch (error) {
          err = error;
          log.raw(err);
          log.error("Package.json isn't correctly formatted.");
          callback(err);
          return;
        }
        manifest.permissions = manifest['cozy-permissions'];
        manifest.name = manifest.name.replace('cozy-', '');
        manifest.slug = manifest.name;
        manifest.displayName = manifest['cozy-displayName'] || manifest.slug;
        manifest.state = "installed";
        manifest.autostop = false;
        manifest.password = 'test';
        manifest.docType = "Application";
        manifest.port = port;
        basePath = path.join(process.cwd(), "client", "app", "assets", "icons");
        svgPath = path.join(basePath, "main_icon.svg");
        pngPath = path.join(basePath, "main_icon.png");
        if (manifest['icon-path'] && fs.existsSync(manifest['icon-path'])) {
          manifest.iconPath = manifest['icon-path'];
          manifest.iconType = 'png';
        } else if (fs.existsSync(svgPath)) {
          manifest.iconType = 'svg';
          manifest.iconPath = svgPath;
        } else if (fs.existsSync(pngPath)) {
          manifest.iconType = 'png';
          manifest.iconPath = pngPath;
        }
        return cb(null, manifest);
      }
    };

    return ProjectManager;

  })();

}).call(this);
