// Generated by CoffeeScript 1.10.0
(function() {
  var Client, fs, helpers, log, path;

  require('colors');

  path = require('path');

  fs = require('fs');

  Client = require('request-json').JsonClient;

  log = require('printit')({
    prefix: 'repository '
  });

  helpers = require('./helpers');

  exports.RepoManager = (function() {
    function RepoManager() {}

    RepoManager.prototype.createLocalRepo = function(appname, isCoffee, callback) {
      var appPath, cmds, removeGitFolderCommand, repo;
      cmds = [];
      if (!isCoffee) {
        repo = "https://github.com/cozy/cozy-template.git";
      } else {
        repo = "https://github.com/cozy/cozy-template-coffee.git";
      }
      appPath = (process.cwd()) + "/" + appname;
      cmds.push({
        name: "git",
        args: ['clone', repo, appname],
        opts: {
          cwd: process.cwd()
        }
      });
      cmds.push({
        name: "git",
        args: ['submodule', 'update', '--init', '--recursive'],
        opts: {
          cwd: appPath
        }
      });
      if (helpers.isRunningOnWindows()) {
        removeGitFolderCommand = {
          name: "rmdir",
          args: ['/S', '/Q', '.git'],
          opts: {
            cwd: appPath
          }
        };
      } else {
        removeGitFolderCommand = {
          name: "rm",
          args: ['-rf', '.git'],
          opts: {
            cwd: appPath
          }
        };
      }
      cmds.push(removeGitFolderCommand);
      cmds.push({
        name: "npm",
        args: ['install'],
        opts: {
          cwd: appPath
        }
      });
      cmds.push({
        name: "npm",
        args: ['install'],
        opts: {
          cwd: appPath + "/client"
        }
      });
      log.info("Creating the project structure...");
      return helpers.spawnUntilEmpty(cmds, function(code) {
        var msg;
        if (code === 0) {
          log.info("Project structure created.".green);
        } else {
          msg = "An error occurred during project structure creation";
          log.error(msg.red);
        }
        return callback();
      });
    };

    RepoManager.prototype.connectRepos = function(user, appname, callback) {
      var appPath, cmds, remoteRepository;
      cmds = [];
      appPath = (process.cwd()) + "/" + appname;
      cmds.push({
        name: "git",
        args: ['init'],
        opts: {
          cwd: appPath
        }
      });
      remoteRepository = "git@github.com:" + user + "/" + appname + ".git";
      cmds.push({
        name: "git",
        args: ['remote', 'add', 'origin', remoteRepository],
        opts: {
          cwd: appPath
        }
      });
      cmds.push({
        name: "git",
        args: ['add', '.'],
        opts: {
          cwd: appPath
        }
      });
      cmds.push({
        name: "git",
        args: ['commit', '-a', '-m', '"First commit."'],
        opts: {
          cwd: appPath
        }
      });
      cmds.push({
        name: "git",
        args: ['push', 'origin', '-u', 'master'],
        opts: {
          cwd: appPath
        }
      });
      return helpers.spawnUntilEmpty(cmds, function() {
        var msg;
        msg = "The project has been successfully linked to a Github " + "repository.";
        log.info(msg.green);
        return callback();
      });
    };

    RepoManager.prototype.createGithubRepo = function(credentials, repo, callback) {
      var client;
      client = new Client('https://api.github.com/');
      client.setBasicAuth(credentials.username, credentials.password);
      return client.post('user/repos', {
        name: repo
      }, function(err, res, body) {
        if (err) {
          log.error("An error occured while creating repository.".red);
          return log.error(err);
        } else if (res.statusCode !== 201) {
          log.error("Cannot create repository on Github.".red);
          return log.error(body);
        } else {
          return callback();
        }
      });
    };

    RepoManager.prototype.saveConfig = function(githubUser, app, url, callback) {
      var data;
      data = "{\n    \"cozy\": {\n        \"appName\": \"" + app + "\",\n        \"url\": \"" + url + "\"\n    },\n    \"github\": {\n        \"user\": \"" + githubUser + "\",\n        \"repoName\": \"" + app + "\"\n    }\n}";
      return fs.writeFile(path.join(app, '.cozy_conf.json'), data, function(err) {
        if (err != null) {
          return log.error(err.red);
        } else {
          log.info("Config file successfully saved.".green);
          return callback();
        }
      });
    };

    return RepoManager;

  })();

}).call(this);
