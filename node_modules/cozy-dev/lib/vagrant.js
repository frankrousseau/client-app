// Generated by CoffeeScript 1.10.0
(function() {
  var Client, compareVersions, exec, fs, helpers, log, path, spawn;

  require('colors');

  path = require('path');

  fs = require('fs');

  log = require('printit')({
    prefix: 'vagrant    '
  });

  Client = require('request-json').JsonClient;

  exec = require('child_process').exec;

  spawn = require('child_process').spawn;

  compareVersions = require("mozilla-version-comparator");

  helpers = require('./helpers');

  exports.VagrantManager = (function() {
    function VagrantManager() {
      this.baseBoxName = 'cozycloud/cozy-dev';
      this.docURL = "http://cozy.io/hack/getting-started/setup-environment.html";
      this.minimumVagrant = "1.5.0";
    }

    VagrantManager.prototype.checkIfVagrantIsInstalled = function(callback) {
      return exec("vagrant -v", (function(_this) {
        return function(err, stdout, stderr) {
          var msg, versionMatch;
          if (err) {
            msg = "Vagrant is required to use a virtual machine. " + ("Please, refer to our documentation on " + _this.docURL);
            return log.error(msg.red);
          } else {
            versionMatch = stdout.match(/Vagrant ([\d\.]+)/);
            if ((versionMatch == null) || versionMatch.length !== 2) {
              msg = "Cannot correctly check the version using the " + "\"vagrant -v\" command. Please report an issue.";
              log.error(msg.red);
              return log.error(("Output of \"vagrant -v\":\n" + stdout + ".").red);
            } else if (compareVersions(_this.minimumVagrant, versionMatch[1]) > 0) {
              msg = "cozy-dev requires Vagrant " + (_this.minimumVagrant + " or later.");
              return log.error(msg.red);
            } else {
              if (callback != null) {
                return callback();
              }
            }
          }
        };
      })(this));
    };

    VagrantManager.prototype.vagrantBoxAdd = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['box', 'add', this.baseBoxName]
      });
      return helpers.spawnUntilEmpty(cmds, function() {
        var msg;
        msg = "The base box has been added to your environment or is " + "already installed.";
        log.info(msg.green);
        if (callback != null) {
          return callback();
        }
      });
    };

    VagrantManager.prototype.vagrantInit = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['init', "cozy-dev-latest"]
      });
      return helpers.spawnUntilEmpty(cmds, (function(_this) {
        return function() {
          return _this.importVagrantFile(callback);
        };
      })(this));
    };

    VagrantManager.prototype.vagrantBoxDestroy = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['destroy', '--force']
      });
      cmds.push({
        name: 'vagrant',
        args: ['box', 'remove', 'cozycloud/cozy-dev']
      });
      cmds.push({
        name: 'rm',
        args: ['-rf', 'Vagrantfile']
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    VagrantManager.prototype.vagrantBoxUpdate = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['box', 'update']
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    VagrantManager.prototype.vagrantUp = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['up']
      });
      return helpers.spawnUntilEmpty(cmds, function(code) {
        if (code === 0) {
          log.info("Checking status ...");
          return helpers.isStarted(0, function() {
            return callback();
          });
        } else {
          return callback(code);
        }
      });
    };

    VagrantManager.prototype.vagrantHalt = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['--force', 'halt']
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    VagrantManager.prototype.vagrantSuspend = function(callback) {
      var cmds;
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['suspend']
      });
      return helpers.spawnUntilEmpty(cmds, callback);
    };

    VagrantManager.prototype.update = function(callback) {
      var cmds, scriptUrl;
      log.info("Patching the updater and updating the VM..." + "This may take a while...");
      cmds = [];
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', 'rm -rf ~/update-devenv.sh']
      });
      scriptUrl = "https://raw.githubusercontent.com/cozy/" + "cozy-setup/master/dev/update-devenv.sh";
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', "curl -Of " + scriptUrl]
      });
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', 'chmod u+x ~/update-devenv.sh']
      });
      cmds.push({
        name: 'vagrant',
        args: ['ssh', '-c', '~/update-devenv.sh']
      });
      return this.importVagrantFile(function() {
        return helpers.spawnUntilEmpty(cmds, callback);
      });
    };

    VagrantManager.prototype.importVagrantFile = function(callback) {
      var client, url;
      log.info("Importing latest Vagrantfile version...");
      url = "cozy/cozy-setup/master/dev/Vagrantfile";
      client = new Client("https://raw.githubusercontent.com/");
      return client.saveFile(url, './Vagrantfile', function(err, res, body) {
        var msg;
        if (err) {
          msg = "An error occurrend while retrieving the Vagrantfile.";
          log.error(msg.red);
        } else {
          log.info("Vagrantfile successfully upgraded.".green);
        }
        if (callback != null) {
          return callback();
        }
      });
    };

    VagrantManager.prototype.virtualMachineStatus = function(callback) {
      var client, portInfo, url;
      url = "http://localhost:9104";
      log.info("Checking status on " + url + "...");
      client = new Client(url);
      portInfo = {
        couchdb: 5984,
        datasystem: 9101,
        controller: 9002,
        proxy: 9104
      };
      return client.get('/status', function(err, res, body) {
        var app, formattedStatus, info, isOkay, status;
        if (err) {
          return callback(1);
        } else {
          isOkay = 0;
          for (app in body) {
            status = body[app];
            if (!(app !== 'registered')) {
              continue;
            }
            if (status === true) {
              formattedStatus = "ok".green;
            } else {
              formattedStatus = "ko".red;
              isOkay = 1;
            }
            info = portInfo[app];
            info = info != null ? " (port: " + info + ")" : "";
            log.info("\t* " + app + info + ": " + formattedStatus);
          }
          return callback(isOkay);
        }
      });
    };

    VagrantManager.prototype.getSshConfig = function(callback) {
      var cmd, config, maybeErr, sshConf, sshConfig;
      config = '';
      sshConf = {};
      cmd = {
        name: 'vagrant',
        args: ['ssh-config']
      };
      sshConfig = spawn(cmd.name, cmd.args, {
        cwd: process.cwd()
      });
      sshConfig.stdout.on('data', function(data) {
        return config += data.toString();
      });
      maybeErr = '';
      sshConfig.stderr.on('data', function(data) {
        return maybeErr += data;
      });
      return sshConfig.on('close', function(err) {
        var conf, configs, i, len, params;
        if (maybeErr !== '') {
          return callback(maybeErr);
        } else if (config === '') {
          return callback('No config');
        } else {
          configs = config.split('\n');
          for (i = 0, len = configs.length; i < len; i++) {
            conf = configs[i];
            conf = conf.replace('  ', '');
            params = conf.split(' ');
            if ((params[0] != null) && (params[1] != null)) {
              sshConf[params[0]] = params[1];
            }
          }
          return callback(null, sshConf);
        }
      });
    };

    return VagrantManager;

  })();

}).call(this);
